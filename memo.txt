Component
- 항상 대문자로 시작하며 함수를 반환 (소문자 => html 태그 , 대문자 => 컴포넌트로 구분 하기때문에)
- 반환문은 한줄에 모두 작성하거나 여러줄일 경우 () 안에 묶어야함
ex)
function MyButton() {
  return (
    <button>I'm a button</button>
  );
}
- 컴포넌트는 다른 컴포넌트를 렌더링할 수 있지만, 컴포넌트 내부에서 다른컴포넌트를 정의해서는 안된다.
ex)
export default function Gallery() {
  // ...
}

// ✅ 최상위 레벨에서 컴포넌트를 선언합니다
function Profile() {
  // ...
}

- 한파일에서 여러 컴포넌트 import,export
- 한파일내에서는 export 시 default를 1개의 컴포넌트만 사용할수있음 => 그냥 export / import 시 import {functionName} from 'path'
Syntax	Export 구문	Import 구문
Default	export default function Button() {}	/ import Button from './button.js';
Named	export function Button() {}	/ import { Button } from './button.js';

- 컴포넌트 순수하게 유지하기
- 같은 props와 state가 주어졌을 때 항상 동일한 JSX를 반환해야 합니다.
- 컴포넌트 내부에서 변수선언시 렌더링 될때마다 재할당되므로 순수성과 관련없음 
- 화면을 업데이트하려면 기존 객체를 변환하는 대신 상태를 “설정”
- 업데이트하고, 애니메이션을 시작하고, 데이터를 변경하는 것을 사이드 이펙트라고 하며, 컴포넌트를 렌더링 할때는 항상 같은 jsx를 도출해야함(직접 컴포넌트에서 변수나 객체를 수정하면 안됨)
- 방법1: props 이용 / 배열변경시 기존 배열 복사하여 새로운 배열에 추가하기 ex) let dataToDisplay = data.slice()

class 지정 
className 사용

jsx내부에 변수 사용시
{} 중괄호 안에 넣기
문자열 연결도 가능
ex){'test'+user.name}

style
- inline style 사용시에도 마찬가지로 {} 안에 style 객체 집어넣음 ( 중괄호 안에 객체라고 생각하면됨)
style={{
    width: user.imageSize,
    height: user.imageSize
}}

조건부 렌더링
1. 일반 if문 사용시 조건부로 jsx 포함가능
let content;
if (isLoggedIn) {
  content = <AdminPanel />;
} else {
  content = <LoginForm />;
}
return (
  <div>
    {content}
  </div>
);

2. jsx 내부에서 조건부 삼항연산자 사용
{ isLoggedIn ? (
    <AdminPanel/>
    ) : (
        <LoginForm/>
)} 

3. else 필요없을때
{isLoggedIn && <AdminPanel />}


리스트 렌더링 하기
const products = [
  { title: 'Cabbage', id: 1 },
  { title: 'Garlic', id: 2 },
  { title: 'Apple', id: 3 },
];

- 화살표 함수는 암시적으로 => 바로 뒤에 식을 반환하기 때문에 return 문이 필요하지 않습니다.
- 하지만 => 뒤에 {} 중괄호가 오는 경우 return을 명시적으로 작성해야 합니다!

const listItems = products.map(product =>
  <li key={product.id}>
    {product.title}
  </li>
);

=> { return (
  <ul>{listItems}</ul>
)};

- key: 위치나 데이터 변경시에도 해당 데이터 찾아갈수있게 하는 고유키값

이벤트 응답하기
- 컴포넌트 내부에 이벤트 헨들러 함수 선언하여 이벤트에 응답할수있음
- 관습적으로 handle로 시작하고 이벤트명 이어붙임
- onClick={handleClick}의 끝에 소괄호(())가 없는 것을 주목하세요!
- 이벤트 핸들러 함수를 호출하지 않고 전달만 하면 됩니다. React는 사용자가 버튼을 클릭할 때 이벤트 핸들러를 호출합니다. 함수명() => 호출임
ex )
function MyButton() {
  function handleClick() {
    alert('You clicked me!');
  }

  return (
    <button onClick={handleClick}>
      Click me
    </button>
  );
}

<button onClick={function handleClick() {
  alert('You clicked me!');
}}>

<button onClick={() => {
  alert('You clicked me!');
}}>

- 이벤트 전파
- 이벤트 핸들러는 해당 컴포넌트가 가진 어떤 자식 컴포넌트의 이벤트를 수신할 수도 있습니다.
- 이를 이벤트가 트리를 따라 “bubble” 되거나 “전파된다”고 표현합니다. 이때 이벤트는 발생한 지점에서 시작하여 트리를 따라 위로 전달됩니다.
- 전파 멈추기
  - e.stopPropagation() 사용해야함
ex)
function Button({ onClick, children }) {
  return (
    <button onClick={e => {
      e.stopPropagation();
      onClick();
    }}>
      {children}
    </button>
  );
}

export default function Toolbar() {
  return (
    <div className="Toolbar" onClick={() => {
      alert('You clicked on the toolbar!');
    }}>
      <Button onClick={() => alert('Playing!')}>
        Play Movie
      </Button>
      <Button onClick={() => alert('Uploading!')}>
        Upload Image
      </Button>
    </div>
  );
}

- 기본 동작 방지하기
- 일부 브라우저 이벤트는 그와 관련된 기본 브라우저 동작을 가집니다. 일례로 <form>의 제출 이벤트는 그 내부의 버튼을 클릭 시 페이지 전체를 리로드하는 것이 기본 동작입니다.
export default function Signup() {
  return (
    <form onSubmit={e => {
      e.preventDefault();
      alert('Submitting!');
    }}>
      <input />
      <button>Send</button>
    </form>
  );
}

화면 업데이트하기
React 렌더링 과정
렌더링 트리거 => 컴포넌트 렌더링 => DOM에 커밋
- 렌더링 트리거
1. 컴포넌트의 초기 렌더링인 경우
2. 컴포넌트의 state가 업데이트된 경우
- 컴포넌트 렌더링
  - 렌더링을 트리거한 후 React는 컴포넌트를 호출하여 화면에 표시할 내용을 파악합니다. “렌더링”은 React에서 컴포넌트를 호출하는 것입니다.
    - 초기 렌더링에서 React는 루트 컴포넌트를 호출합니다. 이후 렌더링에서 React는 state 업데이트가 일어나 렌더링을 트리거한 컴포넌트를 호출합니다.
- DOM에 커밋
  - 초기 렌더링의 경우 React는 appendChild() DOM API를 사용하여 생성한 모든 DOM 노드를 화면에 표시합니다.
  - 리렌더링의 경우 React는 필요한 최소한의 작업(렌더링하는 동안 계산된 것!)을 적용하여 DOM이 최신 렌더링 출력과 일치하도록 합니다.
  - 렌더링 결과가 이전과 같으면 React는 DOM을 건드리지 않습니다.

- state 업데이트 순서
  - state를 설정하더라도 기존 렌더링의 변수는 변경되지 않으며, 대신 새로운 렌더링을 요청합니다.
  - React는 이벤트 핸들러가 실행을 마친 후 state 업데이트를 처리합니다. 이를 batching 이라고 합니다.
  - 하나의 이벤트에서 일부 state를 여러 번 업데이트하려면 setNumber(n => n + 1) 업데이터 함수를 사용할 수 있습니다. ( 대기 중인 state를 가져와서 다음 state를 계산합니다.)

- 렌더링을 일으킬려면(컴포넌트를 새로운 데이터로 업데이트 하기위해서는)
1. 렌더링 사이에 데이터를 유지해야함
2. 새로운 컴포넌트를 렌더링 하도록 유발해야함
=> 지역변수는 렌더링 간에 유지되지않으면 다시 렌더링시에 처음부터 렌더링되어 초기화며 지역변수를 변경해도 렌더링을 일으키지않음
=> 컴포넌트가 다시 렌더링 될때만 정보를 유지하기 위해 state변수가 필요하므로 일반변수가 잘동작하면 state변수 쓰지말기 

useState 훅은 이 두 가지를 제공합니다.
1. 렌더링 간에 데이터를 유지하기 위한 state 변수.
2. 변수를 업데이트하고 React가 컴포넌트를 다시 렌더링하도록 유발하는 state setter 함수
=> 렌더링은 그 시점의 스냅샷을 찍습니다. (“렌더링”이란 React가 컴포넌트, 즉 함수를 호출한다는 뜻입니다. 해당 함수에서 반환하는 JSX는 시간상 UI의 스냅
샷과 같습니다. prop, 이벤트 핸들러, 로컬 변수는 모두 렌더링 당시의 state를 사용해 계산됩니다.)

- 사용방법
1. import { useState } from 'react';
2. 컴포넌트 내부에 state 변수를 선언
- state는 컴포넌트별 메모리
- useState는 초기 state를 인자로 받으며, 현재 상태와 상태를 업데이트할 수 있는 상태 설정 함수를 배열에 담아 반환합니다.
3. useState로부터 현재 state (count)와 이를 업데이트할 수 있는 함수(setCount)를 얻을 수 있습니다.
4. state 변경하고싶으면 setCount()를 실행하고 새값 전달
ex)
import { useState } from 'react';
function MyButton() {
  const [count, setCount] = useState(0);

  function handleClick() {
    setCount(count + 1);
  }

  return (
    <button onClick={handleClick}>
      Clicked {count} times
    </button>
  );
}

- state 값은 불변성을 가지며 값을 교체하기 위해선 변경해야함
  - 객체state 업데이트하기
  ex) 1. 새로운 객체 생성하여 전달
      setPosition({
        x: e.clientX,
        y: e.clientY
      });

      2. 전개문법으로 객체 복사하여 새로운 부분 덮어쓰기
      setPerson({
          ...person, // 이전 필드를 복사
          firstName: e.target.value // 새로운 부분은 덮어쓰기
        });
      3. state 깊이 중첩되어있는 경우 Immer 라이브러리 사용하기
        - useState부분에 useImmter 사용
        - setState시 parameter draft 사용 

  - 배열state 업데이트하기
    - 제거: filter,slice / 교체,변환: map / 정렬: 배열 복사후 처리 / 추가:전개연산자 , slice(): slice사용해서 나누고싶은부분 앞부분자른뒤 추가하고 다시 slice  // slice(begin,end) : end 미포함 / 또는 useImmer 사용
    ex) 
    const [yourArtworks, updateYourList] = useImmer(
      initialList
    );

    function handleToggleMyList(id, nextSeen) {
      updateMyList(draft => {
        const artwork = draft.find(a =>
          a.id === id
        );
        artwork.seen = nextSeen;
      });
    }

  ex) 
  import { useState } from 'react';
  const initialProducts = [{
    id: 0,
    name: 'Baklava',
    count: 1,
  }, {
    id: 1,
    name: 'Cheese',
    count: 5,
  }, {
    id: 2,
    name: 'Spaghetti',
    count: 2,
  }];

  export default function ShoppingCart() {
    const [
      products,
      setProducts
    ] = useState(initialProducts)

    function handleIncreaseClick(productId) {
      setProducts(products.map(product => {
        if (product.id === productId) {
          return {
            ...product,
            count: product.count + 1
          };
        } else {
          return product;
        }
      }))
    }
    function handleDecreaseClick(productId) {
      let nextProducts = products.map(product => {
        if (product.id === productId) {
          return {
            ...product,
            count: product.count - 1
          };
        } else {
          return product;
        }
      });
      nextProducts = nextProducts.filter(p =>
        p.count > 0
      );
      setProducts(nextProducts)
    }
    return (
      <ul>
        {products.map(product => (
          <li key={product.id}>
            {product.name}
            {' '}
            (<b>{product.count}</b>)
            <button onClick={() => {
              handleIncreaseClick(product.id);
            }}>
              +
            </button>
            <button onClick={() => {
              handleDecreaseClick(product.id);
            }}>
              –
            </button>
          </li>
        ))}
      </ul>
    );
  }

-state 관리하기
1. 연관된 state 그룹화하기 ( 함께 변경되면 그룹화 , 필요한 state의조각수를 모를때( 임의로 추가가능한 기능일때))
2. State의 모순 피하기 (다른 2개의 값이 동시에 같은 값되면 x => 한개의 status로 통일)
3. 불필요한 state 피하기 (기존 변수에서 계산가능할때 사용x )
4. props를 state에 쓰지말기 ( props 변경되어도 state에 담은 props는 쳇번째 렌더링중에만 초기화됨)
=> 해결방법 :
  function Message({ messageColor }) {
  const color = messageColor;
5. state의 중복 피하기 ( 동일한 값을 중복해서 useState에 선언 x  / 대신 해당 데이터의 고유값을 useState에 사용하기)
ex) 
const [items, setItems] = useState(initialItems);
const [selectedId, setSelectedId] = useState(0);
- 컴포넌트 간 state 공유하기
  - 때때로 두 컴포넌트의 state가 항상 함께 변경되기를 원할 수 있습니다. 그렇게 하려면 각 컴포넌트에서 state를 제거하고 가장 가까운 공통 부모 컴포넌트로 옮긴 후 props로 전달해야 합니다.
  ex)
  import { useState } from 'react';
  import { foods, filterItems } from './data.js';

  export default function FilterableList() {
    return (
      <>
        <SearchBar />
        <hr />
        <List items={foods} />
      </>
    );
  }

  function SearchBar() {
    const [query, setQuery] = useState('');

    function handleChange(e) {
      setQuery(e.target.value);
    }

    return (
      <label>
        Search:{' '}
        <input
          value={query}
          onChange={handleChange}
        />
      </label>
    );
  }

  function List({ items }) {
    return (
      <table>
        {items.map(food => (
          <tr key={food.id}>
            <td>{food.name}</td>
            <td>{food.description}</td>
          </tr>
        ))}
      </table>
    );
  }

- State 보존,초기화하기
  - React는 같은컴포넌트가 UI 트리에서 그자리에 렌더링되는 한 state을 유지하나,제거하거나 그자리에 다른컴포넌트가 렌더링되면 해당 state를 버림

  - 같은 위치에서 state 초기화하기
    방법1.  다른 위치에 컴포넌트를 렌더링하기
    ex )  
        {isPlayerA &&
          <Counter person="Taylor" />
        }
        {!isPlayerA &&
          <Counter person="Sarah" />
        }
    방법2. key 이용
      {isPlayerA ? (
          <Counter key="Taylor" person="Taylor" />
        ) : (
          <Counter key="Sarah" person="Sarah" />
        )}

Hook 사용하기
use로 시작하는 함수를 Hook이라고 합니다. useState는 React에서 제공하는 내장 Hook입니다. 
컴포넌트(또는 다른 Hook)의 상단에서만 Hook을 호출할 수 있습니다.조건이나 반복에서 useState를 사용하고 싶다면 새 컴포넌트를 추출하여 그곳에 넣으세요.
ex)
import { useState } from 'react';

export default function MyApp() {
  return (
    <div>
      <h1>Counters that update separately</h1>
      <MyButton />
      <MyButton />
    </div>
  );
}

function MyButton() {
  const [count, setCount] = useState(0);

  function handleClick() {
    setCount(count + 1);
  }

  return (
    <button onClick={handleClick}>
      Clicked {count} times
    </button>
  );
}

- 컴포넌트 간에 데이터 공유하기
- 동일한 데이터를 표시하고 업데이트하려면 state를 가장 최상단 컴포넌트로 이동시켜야함
- props : 부모 => 자식 (객체,배열,함수 포함한 모든 js값 전달가능)
export default function MyApp() {
  const [count, setCount] = useState(0);

  function handleClick() {
    setCount(count + 1);
  }

  return (
    <div>
      <h1>Counters that update together</h1>
      <MyButton count={count} onClick={handleClick} />
      <MyButton count={count} onClick={handleClick} />
    </div>
  );
}

function MyButton({count,onClick}) {
  return (
    <button onClick={onClick}>
        {count}
    </button>
  )
}

{count,onClick}
=> props 라고 불림
- 버튼을 클릭하면 onClick 핸들러가 실행됩니다. 각 버튼의 onClick prop는 MyApp 내부의 handleClick 함수로 설정되었으므로 그 안에 있는 코드가 실행됩니다.
- 이 코드는 setCount(count + 1)를 실행하여 count state 변수를 증가시킵니다. 새로운 count 값은 각 버튼에 prop로 전달되므로 모든 버튼에는 새로운 값이 표시됩니다.
- 이를 “state 끌어올리기”라고 합니다. state를 위로 이동함으로써 컴포넌트 간에 state를 공유하게 됩니다.

1.부모에서  props 객체 전달 ( 함수의 파라미터랑 동일함)
2. props를 전달받은 자식컴포넌트에서 사용
3. 두개 동일 
function Avatar(props) {
  let person = props.person;
  let size = props.size;
  // ...
}

function Avatar({person,size}) {
  // ...
}

- react 에서 props 넘겨줄때 spread operator 사용시
const recipe = {
  id: 1,
  name: "스파게티 볼로네즈",
  ingredients: ["파스타", "토마토", "소고기"]
};
<Recipe {...recipe} />
=> <Recipe id={recipe.id} name={recipe.name} ingredients={recipe.ingredients} /> 랑 동일함
리액트에서는 스프레드 연산자를 props 값으로 넘겨줄때 자동으로 key={value} 형태의 개별 props로 인식하여 전달함 


4. vue slot 처럼 jsx props 전달가능
function Card({ children, title }) {
  return (
    <div className="card">
      <div className="card-content">
        <h1>{title}</h1>
        {children}
      </div>
    </div>
  );
}

export default function Profile() {
  return (
    <div>
      <Card title="Photo">
        <img
          className="avatar"
          src="https://i.imgur.com/OKS67lhm.jpg"
          alt="Aklilu Lemma"
          width={100}
          height={100}
        />
      </Card>
      <Card title="About">
        <p>Aklilu Lemma was a distinguished Ethiopian scientist who discovered a natural treatment to schistosomiasis.</p>
      </Card>
    </div>
  );
}

- 렌더링과 반영
1.렌더링 유발 (주방에 식사 주문을 전달하기)
2. 컴포넌트 렌더링 (주방에서 주문을 준비하기)
3. DOM에 반영 (주문을 테이블에 서빙하기)


- api

- memo(SomeComponent, arePropsEqual?)
-memo를 사용하면 컴포넌트의 props가 변경되지 않은 경우 리렌더링을 건너뛸 수 있습니다. (사용중인 context 변경될때는 컴포넌트가 리렌더링됨)
- 메모화는 부모로부터 전달되는 props에만 적용됨
ex)
import {memo} from 'react';
const Greeting = memo(function Greeting({ name }) {
  console.log('Greeting was rendered at', new Date().toLocaleTimeString());
  const [greeting, setGreeting] = useState('Hello');
  return (
    <>
      <h3>{greeting}{name && ', '}{name}!</h3>
      <GreetingSelector value={greeting} onChange={setGreeting} />
    </>
  );
});

- state management 
1. reducer (useReducer hook)
const [state,dispatch] = useReducer(reducerName,initalState)
dispatch({type:'incremented_age'})
  - dispatch 매개변수: action => type 프로퍼티와 추가정보 포함한 객체로 구성
reducer
  - 전달받은 dispatch action을 통해서 계산하여 반환하는 역할 
ex)
import { useReducer } from 'react';

function reducer(state, action) {
  switch(action.type){
     case 'incremented_age': {
      // ✅ Correct: creating a new object
      return {
        ...state,
        age: state.age + 1
      };
    }
    case 'changed_name': {
      // ✅ Correct: creating a new object
      return {
        ...state,
        name: action.nextName
      };
    }
  }
  throw Error('Unknown action.');
}

export default function Counter() {
  const [state, dispatch] = useReducer(reducer, { age: 42,name:'test' });
  function handleInputChange(e) {
      dispatch({
        type: 'changed_name',
        nextName: e.target.value
      });
    }
  return (
    <>
      <button onClick={() => {
        dispatch({ type: 'incremented_age' })
      }}>
        Increment age
      </button>
      <p>Hello! {state.name} are {state.age}. </p>
    </>
  );
}

2. context
  -  부모 컴포넌트가 트리 아래에 있는 모든 컴포넌트에 깊이에 상관없이 정보를 명시적으로 props를 통해 전달하지 않고도 사용할 수 있게 해줍니다.
  1. context 생성하기
  export const MyContext = createContext(defaultValue)
  2. context 사용하기
  자식중 사용할곳에서 let data = useContext(context)
  3. context 제공하기
  자식을 <context.Provider value={data}>로 감싸 부모로부터 context를 받도록함 

3. reducer와 context 합치기
  - reducer의 state와 dispatch를 context의 value값으로 사용하기

  ex) 
  import { createContext, useReducer } from 'react';

  export const TasksContext = createContext(null);
  export const TasksDispatchContext = createContext(null);

  export function TasksProvider({ children }) {
    const [tasks, dispatch] = useReducer(
      tasksReducer,
      initialTasks
    );

    return (
      <TasksContext.Provider value={tasks}>
        <TasksDispatchContext.Provider value={dispatch}>
          {children}
        </TasksDispatchContext.Provider>
      </TasksContext.Provider>
    );
  }

  function tasksReducer(tasks, action) {
    switch (action.type) {
      case 'added': {
        return [...tasks, {
          id: action.id,
          text: action.text,
          done: false
        }];
      }
      case 'changed': {
        return tasks.map(t => {
          if (t.id === action.task.id) {
            return action.task;
          } else {
            return t;
          }
        });
      }
      case 'deleted': {
        return tasks.filter(t => t.id !== action.id);
      }
      default: {
        throw Error('Unknown action: ' + action.type);
      }
    }
  }

  const initialTasks = [
    { id: 0, text: 'Philosopher’s Path', done: true },
    { id: 1, text: 'Visit the temple', done: false },
    { id: 2, text: 'Drink matcha', done: false }
  ];


- 외부 시스템과 연결하는 기능들

- ref
  - 렌더링을 유발하지 않는 hook기능 ( 값을 변경해도 리렌더링(컴포넌트 변경)을 하지않음 )
  - 보관해야하는 데이터일때 유용함
  - ref는 state처럼 모든것을 가리킬수있으며 읽고 수정할수있는 current property를 가진 일반 js객체임
  - ex)
  import {useRef} from 'react';
  let test = useRef('');
  - 주로 DOM 노드 접근할때 사용 
  - flushSync :  React가 DOM 변경을 동기적으로 수행하도록 할 수 있습니다
  ex) state 변경후 ref dom 요소 조작할때 
  import { flushSync } from 'react-dom';
  flushSync(() => {
    setTodos([ ...todos, newTodo]);
  });
  listRef.current.lastChild.scrollIntoView();
  - 자식요소의 dom 노드 접근하는 방법
  ex )
  import {  useRef } from 'react';

  export default function Form() {
    const inputRef = useRef(null);

    function handleClick() {
      inputRef.current.focus();
    }

    return (
      <>
        <MyInput ref={inputRef} />
        <button onClick={handleClick}>
          Focus the input
        </button>
      </>
    );
  }

  import { forwardRef } from 'react';

  export default forwardRef(
    function MyInput(props, ref) {
      return (
        <input
          ref={ref}
          placeholder="Looking for something?"
        />
      );
    }
  );

- effect
  - Effect를 사용하면 렌더링 후 특정 코드를 실행하여 React 외부의 시스템과 컴포넌트를 동기화할 수 있습니다.
  - 렌더링 이후에 실행되지만 특정조건에서만 실행할수도있음 , 의존성 지정하기 
  - 클린업 사용하기 ( effect 다시 실행되기 전마다 호출하여 effect할때마다 생기는 반복 제거 )
  - vue의 onMounted ,  watch 합친 속성이라고 봐도될듯?
  - 개발모드에선 항상 2번씩 실행되므로 호출하기전에 항상 이벤트나 데이터패칭을 제거하는코드를 추가해야함 
  import { useEffect } from 'react';
   useEffect(() => {
    if (isPlaying) {
      console.log('video.play() 호출');
      ref.current.play();
    } else {
      console.log('video.pause() 호출');
      ref.current.pause();
    }
  }, [isPlaying]);
  => 이전 렌더링 중에 isPlaying이 이전과 동일하다면 Effect를 다시 실행하지 않도록 해야 한다고 알려줍니다.
     의존성 배열에는 여러 개의 종속성을 포함할 수 있습니다. 
     React는 지정한 모든 종속성이 이전 렌더링의 그것과 정확히 동일한 값을 가진 경우에만 Effect를 다시 실행하지 않습니다. 
  
  ex)
  import { useState, useEffect } from 'react';
  import { createConnection } from './chat.js';

  export default function ChatRoom() {
    useEffect(() => {
      const connection = createConnection();
      connection.connect();
      return () => connection.disconnect();
    }, []);
    return <h1>채팅에 오신걸 환영합니다!</h1>;
  }

  ex) 이벤트 구독
  useEffect(() => {
    function handleScroll(e) {
      console.log(window.scrollX, window.scrollY);
    }
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  ex) api 가져올때
  useData(url) {
    const [data, setData] = useState(null);
    useEffect(() => {
      let ignore = false;
      fetch(url)
        .then(response => response.json())
        .then(json => {
          if (!ignore) {
            setData(json);
          }
        });
      return () => {
        ignore = true;
      };
    }, [url]);
    return data;
  }

- effect가 필요없는경우
  - 렌더링을 위해 데이터 변환할때 => useMemo 사용하거나 그냥 변수에 담기
  useMemo(calculateValue, dependencies)
  ex) const visibleTodos = useMemo(() => getFilteredTodos(todos, filter), [todos, filter]);
  - 사용자 이벤트 처리할때
  - prop 변경시 state 초기화할땐 key={userId} 이런식으로 명시적인 key 전달하기 / 고유 id값 state에 담아두기 

- effect 생명주기
  - effect를 작성하고 읽을 때는 컴포넌트의 관점(마운트, 업데이트 또는 마운트 해제 방법)이 아닌 개별 effect의 관점(동기화 시작 및 중지 방법)에서 생각하세요.
  - effect가 수행하기를 원하는 작업을 시작하고 중지하는 방법을 지정해야함
  - Effect는 반응형 값에 “반응”합니다. (의존성 지정) => 반응형이 아니여도 될때는 컴포넌트 외부에서 선언하기 (특히 함수,객체는 반응형일때 리렌더링시 항상 다른 함수,객체로 간주됨 )
  ex) 
  import { useState } from 'react';
  import { useSelectOptions } from './useSelectOptions.js';

  export default function Page() {
    const [
      planetList,
      planetId,
      setPlanetId
    ] = useSelectOptions('/planets');

    const [
      placeList,
      placeId,
      setPlaceId
    ] = useSelectOptions(planetId ? `/planets/${planetId}/places` : null);

    return (
      <>
        <label>
          Pick a planet:{' '}
          <select value={planetId} onChange={e => {
            setPlanetId(e.target.value);
          }}>
            {planetList?.map(planet =>
              <option key={planet.id} value={planet.id}>{planet.name}</option>
            )}
          </select>
        </label>
        <label>
          Pick a place:{' '}
          <select value={placeId} onChange={e => {
            setPlaceId(e.target.value);
          }}>
            {placeList?.map(place =>
              <option key={place.id} value={place.id}>{place.name}</option>
            )}
          </select>
        </label>
        <hr />
        <p>You are going to: {placeId || '...'} on {planetId || '...'} </p>
      </>
    );
  }

  import { useState, useEffect } from 'react';
  import { fetchData } from './api.js';

  export function useSelectOptions(url) {
    const [list, setList] = useState(null);
    const [selectedId, setSelectedId] = useState('');
    useEffect(() => {
      if (url === null) {
        return;
      }

      let ignore = false;
      fetchData(url).then(result => {
        if (!ignore) {
          setList(result);
          setSelectedId(result[0].id);
        }
      });
      return () => {
        ignore = true;
      }
    }, [url]);
    return [list, selectedId, setSelectedId];
  }


- custom hook으로 로직 재사용하기
  - hook의 이름은 항상 use로 사용 ( hook(state나 다른 hook기능) 사용안할땐 use로 작명x)
  - 커스텀 Hook은 state 자체가 아닌 state 저장 로직만 공유합니다.
  - 커스텀 Hook을 통해 받는 이벤트 핸들러는 Effect로 감싸야 합니다. 
  ex) 
  useChatRoom({
    roomId: roomId,
    serverUrl: serverUrl,
    onReceiveMessage(msg) {
      showNotification('New message: ' + msg);
    }
  });
  import { useEffect, useEffectEvent } from 'react';
  // ...
  export function useChatRoom({ serverUrl, roomId, onReceiveMessage }) {
    const onMessage = useEffectEvent(onReceiveMessage);
    useEffect(() => {
      const options = {
        serverUrl: serverUrl,
        roomId: roomId
      };
      const connection = createConnection(options);
      connection.connect();
      connection.on('message', (msg) => {
        onMessage(msg);
      });
      return () => connection.disconnect();
    }, [roomId, serverUrl]); // ✅ 모든 의존성이 정의됨.
  }

  ex) 
  export function useOnlineStatus() {
    const [isOnline, setIsOnline] = useState(true);
    useEffect(() => {
      function handleOnline() {
        setIsOnline(true);
      }
      function handleOffline() {
        setIsOnline(false);
      }
      window.addEventListener('online', handleOnline);
      window.addEventListener('offline', handleOffline);
      return () => {
        window.removeEventListener('online', handleOnline);
        window.removeEventListener('offline', handleOffline);
      };
    }, []);
    return isOnline;
  }

  import { useOnlineStatus } from './useOnlineStatus.js';
  function StatusBar() {
    const isOnline = useOnlineStatus();
    return <h1>{isOnline ? '✅ 온라인' : '❌ 연결 안 됨'}</h1>;
  }

  function useData(url) {
    const [data, setData] = useState(null);
    useEffect(() => {
      if (url) {
        let ignore = false;
        fetch(url)
          .then(response => response.json())
          .then(json => {
            if (!ignore) {
              setData(json);
            }
          });
        return () => {
          ignore = true;
        };
      }
    }, [url]);
    return data;
  }

  function ShippingForm({ country }) {
    const cities = useData(`/api/cities?country=${country}`);
    const [city, setCity] = useState(null);
    const areas = useData(city ? `/api/areas?city=${city}` : null);
    // ..
  }

  나중에볼거: useSyncExternalStore - https://ko.react.dev/reference/react/useSyncExternalStore

- react-query
  npm install @tanstack/react-query @tanstack/react-query-devtools
  import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
  최상단 컴포넌트 위에 
  const queryClient = new QueryClient()
  <QueryClientProvider client={queryClient}></QueryClientProvider> 감싸줌

  useQuery 
  - 데이터 패칭용으로 사용(get요청)
  const { data } = useQuery(
   {
    queryKey:['data',...], // unique key (응답 데이터 캐싱) ['key',''...]
    queryFunction:function(ex) ()=> functionName), // promise 반환하는 함수(fetch,axios등의 함수)
    ...options, // 옵션지정객체
    }
  )

  data : 마지막으로 성공한 데이터 (Response)
  error : 에러가 발생했을 때 반환되는 객체
  isError,isFetching, isLoading, isSuccess 등 : 현재 Query의 상태
  refetch : 해당 Query를 refetch 하는 함수
  
  - 여러번 사용할때 
  const { data: userData, isLoading: isUserLoading, error: userError } = useFetchData('https://api.example.com/users');
  const { data: postData, isLoading: isPostLoading, error: postError } = useFetchData('https://api.example.com/posts');

  - 동적 데이터 로드
  useQuery options enable:true 사용 
  ex) 
  const { data, isLoading, error, refetch } = useQuery(["user", userId], () => fetchData(userId), {
    enabled: false, // 자동 실행 비활성화
  });
  
  - 데이터 로드 이후 로컬 상태 업데이트
  useEffect(() => {
      if (data) {
          setUserName(data.name);
      }
  }, [data]);